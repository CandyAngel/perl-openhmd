=head1 NAME

OpenHMD::Backend::Inline - Binding for the OpenHMD C library, using Inline::C

=head1 SYNOPSIS

This synopsis is available as eg/openhmd-backend-inline.pl

    use OpenHMD::Backend::Inline qw(:all);

    my $context = ohmd_ctx_create() or die 'Failed to create context';

    my $count = ohmd_ctx_probe($context);
    die sprintf 'Failed to probe devices: %s', ohmd_ctx_get_error($context)
        if $count < 0;
    printf "Devices: %i\n\n", $count;

    my $print_gets = sub {
        my ($title, $index, $type) = @_;
        my $value = ohmd_list_gets($context, $index, $type);

        printf "    %-8s:   %s\n", $title, $value;
    };

    foreach my $index (0 .. $count - 1) {
        printf "Device %i\n", $index;
        $print_gets->('Vendor', $index, $OHMD_VENDOR);
        $print_gets->('Product', $index, $OHMD_PRODUCT);
        $print_gets->('Path', $index, $OHMD_PATH);
        print "\n";
    }

    my $device = ohmd_list_open_device($context, 0);
    die sprintf 'Failed to open device: %s', ohmd_ctx_get_error($context)
        if !$device;

    my $status = ohmd_close_device($device);
    die sprintf 'Failed to close device: %s', ohmd_ctx_get_error($context)
        if $status != $OHMD_S_OK;

    ohmd_ctx_destroy($context);

=head1 DESCRIPTION

OpenHMD::Backend::Inline is a thin wrapper for the OpenHMD C library, using
Inline::C.

=head1 FUNCTIONS

OpenHMD::Backend::Inline implements the following functions, which can be
imported individually or using the C<:functions> tag.

=head2 ohmd_close_device

    my $status = ohmd_close_device($device);

Closes a device.

=head2 ohmd_ctx_create

    my $context = ohmd_ctx_create();

Create a new OpenHMD context.

=head2 ohmd_ctx_destroy

    ohmd_ctx_destroy($context);

Destroy an OpenHMD context.

=head2 ohmd_ctx_get_error

    my $error = ohmd_ctx_get_error($context);

Gets the latest human readable error message.

=head2 ohmd_ctx_probe

    my $device_count = ohmd_ctx_probe($context);

Probes for supported devices and returns the count of found devices.

=head2 ohmd_list_gets

    my $string = ohmd_list_gets($context, $index, $type);

Gets the string value of $type for device at $index.

    # Get vendor of device at index 1
    my $vendor = ohmd_list_gets($context, 1, $OHMD_VENDOR);

=head2 ohmd_list_open_device

    my $device = ohmd_list_open_device($context, $index);

Opens the device at $index.

    # Open the default device
    my $device = ohmd_list_open_device($context, 0);

=head1 CONSTANTS

OpenHMD::Backend::Inline provides the following constants, which can be
imported individually or using the C<:constants> tag.

=head2 Status

    $OHMD_S_INVALID_PARAMETER
    $OHMD_S_OK
    $OHMD_S_UNKNOWN_ERROR
    $OHMD_S_USER_RESERVED

=head2 String

    $OHMD_PATH
    $OHMD_PRODUCT
    $OHMD_VENDOR

=head1 SEE ALSO

=over 4

=item L<openhmd.net|http://openhmd.net/>

OpenHMD's website.

=item #openhmd @ freenode

Official IRC channel for OpenHMD

=back

=head1 DEPENDENCIES

OpenHMD::Backend::Inline depends on the following modules.

=over 4

=item Carp

Throwing errors from the callers perspective.

=item Const::Fast

Exportable, read-only constants.

=item Exporter

Exporting constants and functions.

=item Inline::C

Access to C functions from Perl.

=back

=head1 AUTHOR

CandyAngel <candyangel@electricjungle.org>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2015 CandyAngel <candyangel@electricjungle.org>.
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
